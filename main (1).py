from telegram import Update, ReplyKeyboardMarkup
from telegram.constants import ParseMode
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from datetime import datetime
import re

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TOKEN = "TOKEN"
MASTER_CHAT_ID = None  # –°–Ω–∞—á–∞–ª–∞ chat_id –º–∞—Å—Ç–µ—Ä–∞ –Ω–µ –∑–∞–¥–∞–Ω

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫
def get_greeting():
    hour = datetime.now().hour
    if 5 <= hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ‚òÄÔ∏è!"
    elif 12 <= hour < 16:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—åüïõ!"
    else:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Äüåô!"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–µ–∫—Å—Ç–∞ (–∏–º—è, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã) –±–µ–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤
def is_valid_text(text):
    return bool(re.match(r"^(?![ .])[–ê-–Ø–∞-—è0-9 ,.!?]{2,}$", text.strip()))

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    greeting = get_greeting()
    message = (
        f"""{greeting} –Ø ‚Äî –ê–ª–µ–∫—Å–µ–π, —á–∞—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä —Å 14-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã. –ú–æ—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚Äî —Ä–µ–º–æ–Ω—Ç —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–≤ –∏ –º–æ—Ä–æ–∑–∏–ª—å–Ω—ã—Ö –∫–∞–º–µ—Ä, –∏ —è —Ä–∞–±–æ—Ç–∞—é –Ω–∞–ø—Ä—è–º—É—é —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –º–æ–∏ —Ü–µ–Ω—ã –≥–æ—Ä–∞–∑–¥–æ –Ω–∏–∂–µ, —á–µ–º —É –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π.

<b>–ü–æ—á–µ–º—É —Å—Ç–æ–∏—Ç –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ –º–µ–Ω—è?</b>
  üïí –ë—ã—Å—Ç—Ä—ã–π –≤—ã–µ–∑–¥ –≤ —Ç–µ—á–µ–Ω–∏–µ 30-60 –º–∏–Ω—É—Ç.  
  üõ† –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —Ä–µ–º–æ–Ω—Ç–∞.  
  üîß –ò—Å–ø–æ–ª—å–∑—É—é —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∑–∞–ø—á–∞—Å—Ç–∏.  
  üèÜ –ì–∞—Ä–∞–Ω—Ç–∏—è –Ω–∞ –≤—Å–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç ‚Äî –¥–æ 12 –º–µ—Å—è—Ü–µ–≤.  
  üìÖ –†–∞–±–æ—Ç–∞—é 24/7, –±–µ–∑ –≤—ã—Ö–æ–¥–Ω—ã—Ö –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤.

<b>–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∏, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ.</b>
"""
    )

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
    keyboard = ReplyKeyboardMarkup(
        [["–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫"]],
        resize_keyboard=True,
        one_time_keyboard=True,
    )
    await update.message.reply_text(
        message,
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML,
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –º–∞—Å—Ç–µ—Ä–∞, –µ—Å–ª–∏ –µ–≥–æ –µ—â—ë –Ω–µ—Ç
    global MASTER_CHAT_ID
    if MASTER_CHAT_ID is None:
        MASTER_CHAT_ID = update.message.chat_id

# –ö–æ–º–∞–Ω–¥–∞ /getid –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è chat_id –º–∞—Å—Ç–µ—Ä–∞
async def get_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if MASTER_CHAT_ID is None:
        await update.message.reply_text("–í–∞—à chat_id –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        await update.message.reply_text(f"–í–∞—à chat_id: {MASTER_CHAT_ID}")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ chat_id –º–∞—Å—Ç–µ—Ä–∞
async def save_master_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MASTER_CHAT_ID
    if MASTER_CHAT_ID is None:  # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        MASTER_CHAT_ID = update.message.chat_id
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–∞—à chat_id —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {MASTER_CHAT_ID}")
    else:
        await update.message.reply_text(f"–í–∞—à chat_id —É–∂–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {MASTER_CHAT_ID}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
async def handle_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    city = update.message.text.strip()
    if city in ["–ß–µ–±–æ–∫—Å–∞—Ä—ã", "–ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫"]:
        context.user_data['city'] = city

        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞
        await update.message.reply_text(
            f"üìå–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥: {city}. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –∏–º—è.",
            reply_markup=ReplyKeyboardMarkup([[]], resize_keyboard=True),  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        )
    else:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, –Ω–∞–∂–∞–≤ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: –ß–µ–±–æ–∫—Å–∞—Ä—ã –∏–ª–∏ –ù–æ–≤–æ—á–µ–±–æ–∫—Å–∞—Ä—Å–∫."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
async def handle_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.message.text.strip()
    if is_valid_text(name):
        context.user_data['name'] = name
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ, {name}! –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —á—ë–º –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –≤–∞—à–∏–º —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–æ–º –∏–ª–∏ –º–æ—Ä–æ–∑–∏–ª—å–Ω–æ–π –∫–∞–º–µ—Ä–æ–π.‚öôÔ∏è"
        )
    else:
        await update.message.reply_text(
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞, —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤, —Ü–∏—Ñ—Ä –∏–ª–∏ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –∑–Ω–∞–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
async def handle_problem(update: Update, context: ContextTypes.DEFAULT_TYPE):
    problem = update.message.text.strip()
    if is_valid_text(problem):
        context.user_data['problem'] = problem
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞üìû.")
    else:
        await update.message.reply_text(
            "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –∏ –±—ã—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    phone = update.message.text.strip()
    if re.match(r'^\+?\d{10,15}$', phone):
        context.user_data['phone'] = phone
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞.")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É
        name = context.user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        city = context.user_data.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')
        problem = context.user_data.get('problem', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
        phone_number = context.user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')
        username = update.message.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'

        summary = (
            f"üîî <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:</b>\n\n"
            f"üìç <b>–ì–æ—Ä–æ–¥:</b> {city}\n"
            f"üë§ <b>–ò–º—è:</b> {name}\n"
            f"üõ† <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {problem}\n"
            f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone_number}\n"
            f"üìù <b>–Æ–∑–µ—Ä–Ω–µ–π–º:</b> @{username}"
        )

        if MASTER_CHAT_ID:
            try:
                await context.bot.send_message(
                    chat_id=MASTER_CHAT_ID, text=summary, parse_mode=ParseMode.HTML
                )
            except Exception as e:
                await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏ –º–∞—Å—Ç–µ—Ä—É: {e}")
    else:
        await update.message.reply_text(
            "–£–∫–∞–∑–∞–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –º–æ–∂–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å '+'. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'city' not in context.user_data:
        await handle_city(update, context)
    elif 'name' not in context.user_data:
        await handle_name(update, context)
    elif 'problem' not in context.user_data:
        await handle_problem(update, context)
    elif 'phone' not in context.user_data:
        await handle_phone(update, context)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def main():
    application = Application.builder().token(TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("getid", get_id))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    application.add_handler(MessageHandler(filters.TEXT, save_master_id))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()




